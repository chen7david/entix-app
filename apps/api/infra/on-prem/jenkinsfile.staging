pipeline {
    agent any

    environment {
        // App Configuration
        APP_NAME = credentials('APP_NAME')
        APP_PORT = credentials('APP_PORT')
        NODE_ENV = credentials('NODE_ENV')

        // Docker Configuration
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DOCKER_IMAGE = credentials('DOCKER_IMAGE')
        DOCKER_IMAGE_TAG = credentials('DOCKER_IMAGE_TAG')
        CONTAINER_NAME = credentials('CONTAINER_NAME')

        // Logger Configuration
        NEW_RELIC_ENABLED = credentials('NEW_RELIC_ENABLED')
        NEW_RELIC_APP_NAME = credentials('NEW_RELIC_APP_NAME')
        NEW_RELIC_LICENSE_KEY = credentials('NEW_RELIC_LICENSE_KEY')
        LOG_LEVEL = credentials('LOG_LEVEL')

        // Database Configuration
        DATABASE_URL = credentials('DATABASE_URL')
        CONNECTION_TIMEOUT_MILLIS = credentials('CONNECTION_TIMEOUT_MILLIS')
        IDLE_TIMEOUT_MILLIS = credentials('IDLE_TIMEOUT_MILLIS')
        MAX_POOL_SIZE = credentials('MAX_POOL_SIZE')

        // AWS Configuration
        AWS_REGION = credentials('AWS_REGION')
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        
        // Cognito Configuration
        AWS_COGNITO_USER_POOL_ID = credentials('COGNITO_USER_POOL_ID')
        AWS_COGNITO_USER_POOL_CLIENT_ID = credentials('COGNITO_CLIENT_ID')
        
        // JWT Configuration (using default values for staging)
        JWT_ACCESS_TOKEN_SECRET = credentials('JWT_ACCESS_TOKEN_SECRET')
        JWT_REFRESH_TOKEN_SECRET = credentials('JWT_REFRESH_TOKEN_SECRET')
        JWT_ACCESS_TOKEN_EXPIRATION_TIME = credentials('JWT_ACCESS_TOKEN_EXPIRATION_TIME')
        JWT_REFRESH_TOKEN_EXPIRATION_TIME = credentials('JWT_REFRESH_TOKEN_EXPIRATION_TIME')
    }

    stages {

        stage('Pull Latest Image') {
            steps {
                sh '''
                docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_IMAGE_TAG
                '''
            }
        }

        stage('Deploy Container') {
            steps {
                sh '''
                # Stop and remove existing container if it exists
                docker stop $CONTAINER_NAME || true
                docker rm $CONTAINER_NAME || true
                
                # Start new container
                docker run -d \
                    --name $CONTAINER_NAME \
                    --network db_network \
                    -p $APP_PORT:$APP_PORT \
                    -e NODE_ENV=$NODE_ENV \
                    -e APP_PORT=$APP_PORT \
                    -e APP_NAME=$APP_NAME \
                    -e LOG_LEVEL=$LOG_LEVEL \
                    -e DATABASE_URL=$DATABASE_URL \
                    -e CONNECTION_TIMEOUT_MILLIS=$CONNECTION_TIMEOUT_MILLIS \
                    -e IDLE_TIMEOUT_MILLIS=$IDLE_TIMEOUT_MILLIS \
                    -e MAX_POOL_SIZE=$MAX_POOL_SIZE \
                    -e NEW_RELIC_ENABLED=$NEW_RELIC_ENABLED \
                    -e NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY \
                    -e NEW_RELIC_APP_NAME=$NEW_RELIC_APP_NAME \
                    -e AWS_REGION=$AWS_REGION \
                    -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                    -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                    -e AWS_COGNITO_USER_POOL_ID=$AWS_COGNITO_USER_POOL_ID \
                    -e AWS_COGNITO_USER_POOL_CLIENT_ID=$AWS_COGNITO_USER_POOL_CLIENT_ID \
                    -e JWT_ACCESS_TOKEN_SECRET=$JWT_ACCESS_TOKEN_SECRET \
                    -e JWT_REFRESH_TOKEN_SECRET=$JWT_REFRESH_TOKEN_SECRET \
                    -e JWT_ACCESS_TOKEN_EXPIRATION_TIME=$JWT_ACCESS_TOKEN_EXPIRATION_TIME \
                    -e JWT_REFRESH_TOKEN_EXPIRATION_TIME=$JWT_REFRESH_TOKEN_EXPIRATION_TIME \
                    --restart unless-stopped \
                    $DOCKER_REGISTRY/$DOCKER_IMAGE:$DOCKER_IMAGE_TAG
                
                # Connect the container to web_network
                docker network connect web_network $CONTAINER_NAME
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                # Clean up unused images
                docker image prune -a -f --filter "until=24h"
                
                # Clean up system
                docker system prune -f
                '''
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully'
        }
        failure {
            echo 'Deployment failed'
        }
    }
}