name: Api CD

on:
  push:
    branches: [main, staging]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: entix-api

jobs:
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://testuser:testpassword@localhost:5432/testdb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Cache dependencies and turbo
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .turbo
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Lint API
        run: pnpm lint --filter=api

      - name: Type check API
        run: pnpm check-types --filter=api

      - name: Run tests for API only
        run: pnpm test --filter=api

  build-and-push-api:
    name: Build & Push Docker Image
    needs: [test-api]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ vars.IMAGE_TAG || github.sha }}
            type=sha,format=short

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Jenkins Deploy
        if: success()
        uses: appleboy/jenkins-action@v1.1.1
        with:
          url: ${{ vars.JENKINS_URL }}
          user: ${{ vars.JENKINS_USER }}
          token: ${{ secrets.JENKINS_TOKEN }}
          job: ${{ vars.JENKINS_JOB_NAME }}
