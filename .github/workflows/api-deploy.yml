name: API CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'packages/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'packages/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test-entix-api
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432; do sleep 1; done

      - name: Run database migrations
        run: pnpm --filter api db:push
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test-entix-api
          NODE_ENV: test

      - name: Build API
        run: pnpm --filter api build
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test-entix-api
          PGUSER: postgres
          PGPASSWORD: postgres
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: test-entix-api
          PORT: 3000
          LOG_LEVEL: error
          COGNITO_REGION: us-east-1
          COGNITO_USER_POOL_ID: us-east-1_1234567890
          COGNITO_CLIENT_ID: 1234567890

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Trigger Jenkins Job Webhook
        if: success()
        uses: appleboy/jenkins-action@v1.1.1
        with:
          url: ${{ vars.JENKINS_URL }}
          user: ${{ vars.JENKINS_USER }}
          token: ${{ secrets.JENKINS_TOKEN }}
          job: prod-entix-api
